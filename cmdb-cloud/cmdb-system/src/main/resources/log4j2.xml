<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration monitorInterval="5">
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
    <!--变量配置-->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <!-- 详细格式参考 https://blog.csdn.net/Q176782/article/details/78288734-->
        <property name="LOG_PATTERN"
                  value="%date{HH:mm:ssSSS}{GMT+8}[%thread] %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Yellow, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} %logger{36} %style{%C.%M(%L)}{cyan}: %msg%n" />
        <!-- 定义日志存储的路径(文件存储方式) -->
        <property name="FILE_PATH" value="logs" />
        <property name="FILE_NAME" value="HISTORY-LOG" />
    </Properties>

    <appenders>
        <!-- 配置mongdb appender
            注意：配置的用户一定要有数据的认证权限，否则启动会报错
        -->
        <NoSql name="CMDBSystemInfoAppender">
            <!--参数分别是：数据库名，集合名，服务器ip，端口。还可以指定其他参数或升级版本，详情请看：http://logging.apache.org/log4j/2.x/manual/appenders.html#NoSQLAppender-->
            <MongoDb databaseName="silentiger-cmdb-log" collectionName="cmdb_system_info_log" server="192.168.83.141" port="27017"
                     username = "yuyunhu" password = "123456"/>
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
        </NoSql>
        <!-- 配置mongdb appender >=error级别的日志单独存放到另一个集合中（cmdb_system_error_log）-->
        <NoSql name="CMDBSystemErrorAppender">
            <!--参数分别是：数据库名，集合名，服务器ip，端口。还可以指定其他参数或升级版本，详情请看：http://logging.apache.org/log4j/2.x/manual/appenders.html#NoSQLAppender-->
            <MongoDb databaseName="silentiger-cmdb-log" collectionName="cmdb_system_error_log" server="192.168.83.141" port="27017"
                     username = "yuyunhu" password = "123456"/>
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
        </NoSql>
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
        </console>


        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
        <File name="Filelog" fileName="${FILE_PATH}/test.log" append="false">
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </File>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info.log" filePattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

        <!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/warn.log" filePattern="${FILE_PATH}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

        <!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileError" fileName="${FILE_PATH}/error.log" filePattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

    </appenders>

    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.mybatis" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </logger>
        <!--监控系统信息-->
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
        <Logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>

        <!-- 只把 cmdb-system（服务名） 的日志写进mongodb
            这个无法实现，只能根据日志的不同级别区分不同的集合
            比如下面这两个，
                所有>=info级别的都存放到cmdb_system_info_log集合中
                所有>=error级别的都存放到cmdb_system_error_log集合中
            name也可以配置成顶层包名，然后在getLogger的时候获取类名，也可以生效，这样在控制台打印的时候能看到哪个类哪个方法的哪一行出了问题
            但是这样会有一个问题就是存入数据库的LoggerName就会是全类名，这样在查询一个服务的日志的时候就需要根据包名进行模糊匹配，而且数据库中也会存储日志源也能查看源头
            所以我就直接使用自定义名称
        -->
<!--        <Logger name="org.system" level="info" additivity="false">-->
        <Logger name="cmdb-system-log" level="info" additivity="false">
            <!-- 对于>=INFO级别的信息，单独用一个集合来保存 -->
            <AppenderRef ref="CMDBSystemInfoAppender"/>
            <!-- 对于ERROR信息，单独用一个集合来保存 -->
            <AppenderRef ref="CMDBSystemErrorAppender"/>
            <!-- 为了调试方便，控制台也要打印一份日志 -->
            <AppenderRef ref="Console"/>
        </Logger>

        <root level="info">
            <appender-ref ref="CMDBSystemInfoAppender"/> <!--主要是配置输出在mongodb-->
            <appender-ref ref="CMDBSystemErrorAppender"/> <!--主要是配置输出在mongodb-->
            <appender-ref ref="Console"/>
<!--            <appender-ref ref="Filelog"/>-->
<!--            <appender-ref ref="RollingFileInfo"/>-->
<!--            <appender-ref ref="RollingFileWarn"/>-->
<!--            <appender-ref ref="RollingFileError"/>-->
        </root>
    </loggers>

</configuration>
